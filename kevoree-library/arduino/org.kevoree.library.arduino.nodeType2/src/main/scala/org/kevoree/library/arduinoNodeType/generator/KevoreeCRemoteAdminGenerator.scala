package org.kevoree.library.arduinoNodeType.generator

trait KevoreeCRemoteAdminGenerator extends KevoreeCAbstractGenerator {
  /*
   def generateCheckForAdminMsg(){

   context b "  int serialIndex = 0;"
   context b "  char inBytes[200];"
   context b "void checkForAdminMsg(){"
   context b "  while(Serial.available()>0 && serialIndex < 200) {"
   context b "      inBytes[serialIndex] = Serial.read();"
   context b "      if (inBytes[serialIndex] == '\\n' || inBytes[serialIndex] == ';') {"
   context b "        inBytes[serialIndex] = '\\0';"
   context b "Serial.println(inBytes);"
   context b "        parseForAdminMsg(inBytes);"
   context b "        serialIndex = 0;"
   context b "      } else {"
   context b "        serialIndex++;"
   context b "      }"
   context b "  }"
   context b "  if(serialIndex >= 200){"
   context b "      serialIndex = 0;"
   context b "  }"
   context b "}"
   }    */

  def generateCheckForAdminMsg() {
    context b "//ARDUINO SERIAL INPUT READ "
    context b "#define BUFFERSIZE 100      "
    context b "int serialIndex = 0;        "
    context b "char inBytes[BUFFERSIZE];   "
    context b "void checkForAdminMsg(){     "
    context b "  if(Serial.available()>0 && serialIndex < BUFFERSIZE) { "
    context b "    inBytes[serialIndex] = Serial.read();                 "
    context b "    if (inBytes[serialIndex] == '\\n' || inBytes[serialIndex] == ';') {  "
    context b "              inBytes[serialIndex] = '\0';  "
    context b "              parseForAdminMsg();                "
    context b "               for(int i=0;i<serialIndex;i++){   "
    context b "                    inBytes[serialIndex];       "
    context b "                }                               "
    context b "                serialIndex = 0;                "
    context b "               Serial.println(freeRam());        "
    context b "    } else {      "
    context b "      serialIndex++;   "
    context b "    }       "
    context b "  }          "
    context b "  if(serialIndex >= BUFFERSIZE){   "
    context b "    Serial.println(\"Buffer overflow\");  "
    context b "      for(int i=0;i<serialIndex;i++){   "
    context b "          inBytes[serialIndex];         "
    context b "      }                                "
    context b "      serialIndex = 0;                "
    context b "  }                                   "
    context b "}                                    "
  }
  
  def generateConcatKevscriptParser(): Unit= {
    context b "char * insID;  "
    context b "char * typeID; "
    context b "char * params;   "
    context b "char * chID;        "
    context b "char * portID;            "
    context b "const char delims[] = \":\";    "
    context b "boolean parseForAdminMsg(){       "
    context b "  if(serialIndex < 7){return false;}    "
    context b "  Serial.println(inBytes);          "
    context b "  if(inBytes[0] == 'b' && inBytes[1] == '{' && inBytes[serialIndex-1] == '}'  ){  "
    context b "    inBytes[serialIndex-1] = '\\0';   "
    context b "    if( inBytes[2]=='u' && inBytes[3]=='d' && inBytes[4]=='i' && inBytes[5]==':' ){  "
    context b "      insID = strtok(&inBytes[6], delims);  "
    context b "      params = strtok(NULL, delims);    "
    context b "      updateParams(getIndexFromName(insID),params);   "
    context b "      return true;      "
    context b "    }   "
    context b "    if( inBytes[2]=='a' && inBytes[3]=='i' && inBytes[4]=='n' && inBytes[5]==':' ){ "
    context b "      insID = strtok(&inBytes[6], delims); "
    context b "      typeID = strtok(NULL, delims);"
    context b "      params = strtok(NULL, delims); "
    context b "      Serial.println(insID);"
    context b "      Serial.println(typeID); "
    context b "      Serial.println(params); "
    context b "      //createInstance(typeID,insID,params);  "
    context b "      return true;"
    context b "    }      "
    context b "    if( inBytes[2]=='r' && inBytes[3]=='i' && inBytes[4]=='n' && inBytes[5]==':' ){    "
    context b "      insID = strtok(&inBytes[6], delims);   "
    context b "      Serial.println(insID);                "
    context b "      //removeInstance(getIndexFromName(insID));  "
    context b "      return true;   "
    context b "    }               "
    context b "    if( inBytes[2]=='a' && inBytes[3]=='b' && inBytes[4]=='i' && inBytes[5]==':' ){   "
    context b "      insID = strtok(&inBytes[6], delims);                                             "
    context b "      chID = strtok(NULL, delims);                                                      "
    context b "      portID = strtok(NULL, delims);                                                     "
    context b "      Serial.println(insID);                                                              "
    context b "      Serial.println(chID);                                                                "
    context b "      Serial.println(portID);                                                               "
    context b "      //bind(getIndexFromName(insID),getIndexFromName(chID),portID);                         "
    context b "      return true;                                                                            "
    context b "    }                                                                                         "
    context b "    if( inBytes[2]=='r' && inBytes[3]=='b' && inBytes[4]=='i' && inBytes[5]==':' ){           "
    context b "      insID = strtok(&inBytes[6], delims);                                                    "
    context b "      chID = strtok(NULL, delims);                                                            "
    context b "      portID = strtok(NULL, delims);                                                          "
    context b "      Serial.println(insID);                                                                  "
    context b "      Serial.println(chID);                                                                   "
    context b "      Serial.println(portID);                                                                 "
    context b "      //unbind(getIndexFromName(insID),getIndexFromName(chID),portID);                        "
    context b "      return true;                                                                            "
    context b "    }                                                                                         "
    context b "  }                                                                                           "
    context b "  return false;                                                                               "
    context b "}                                                                                             "


    /*
     context b "    boolean parseForAdminMsg(char * msgToTest){"
     context b "  String adminMsg = String(msgToTest);"
     context b "  if(adminMsg.length() < 3){return false;}"
     context b "  if(adminMsg.charAt(0) == 'b' && adminMsg.charAt(1) == '{' ){"
     context b "     int i = 2;"
     context b "     char currentChar = adminMsg.charAt(i);"
     context b "     char * block = (char *)calloc(200,sizeof (char));"
     context b "     while(currentChar != '}' && currentChar != '\0'){"
     context b "      block[i-2] = currentChar;"
     context b "      i++;currentChar = adminMsg.charAt(i);"
     context b "     }"
     context b "     block[i-2] = '\0';   "
     context b "     char * str;"
     context b "     char *p = block;"
     context b "     while ((str = strtok_r(p, \"/\", &p)) != NULL){"
     context b "      char * str2;"
     context b "      char* values[5];"
     context b "      int valueIndex = 0;"
     context b "      while ((str2 = strtok_r(str, \":\", &str)) != NULL){"
     context b "        values[valueIndex] = str2;"
     context b "        valueIndex ++;"
     context b "      }  "
     context b "      if(String(values[0]) == \"ain\" && valueIndex  >= 3){//AIN CHECK"
     context b "        if(valueIndex == 4){"
     context b "           createInstance(values[2],values[1],values[3]);"
     context b "        } else {"
     context b "           createInstance(values[2],values[1],\"\"); "
     context b "        }"
     context b "      } //END AIN CHECK      "

     context b "      if(String(values[0]) == \"rin\" && valueIndex  == 2){//RIN CHECK"
     context b "           removeInstance(getIndexFromName(values[1]));"
     context b "      } //END RIN CHECK     "

     context b "      if(String(values[0]) == \"abi\" && valueIndex  == 4){//ACO CHECK"
     context b "           bind(getIndexFromName(values[1]),getIndexFromName(values[2]),values[3]);"
     context b "      } //END ACO CHECK     "
     context b "      if(String(values[0]) == \"rbi\" && valueIndex  == 4){//ACO CHECK"
     context b "           unbind(getIndexFromName(values[1]),getIndexFromName(values[2]),values[3]);"
     context b "      } //END ACO CHECK   "
     context b "      if(String(values[0]) == \"udi\" && valueIndex  == 3){//ACO CHECK"
     context b "           updateParams(getIndexFromName(values[1]),values[2]);"
     context b "      } //END ACO CHECK   "
     context b "     }"
     context b "     free(block);"

     //DEBUG TO REMOVE
     context b "Serial.print(\"New instances size=\");"
     context b "Serial.println(nbInstances);"

     context b "     return true;"
     context b "  }"
     context b "  return false;"
     context b "}"


     }    */

  }
}